<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas width="100%"
		   height="100%"
		   xmlns:mx="http://www.adobe.com/2006/mxml">

	<mx:Accordion width="100%"
				  height="100%">

		<mx:Canvas label="Welcome"
				   width="100%"
				   height="100%">
			<mx:Image id="logo"
					  verticalCenter="0"
					  horizontalCenter="0"
					  source="assets/RobotLegsLogoSmallWeb.png"/>
		</mx:Canvas>

		<mx:Canvas label="Introduction"
				   width="100%"
				   height="100%">
			<mx:Text text="Robotlegs is a lightweight AS3 MVCS Micro-Architecture inspired by PureMVC.&#xd;&#xd;Robotlegs was created to provide a small, loosly coupled application framework that is easy to test. Where other frameworks are plagued with coupling and Singletons, Robotlegs has none. Bolier plate? Robotlegs avoids it. It is the framework youâ€™ve been looking for."
					 x="10"
					 y="10"
					 width="90%"
					 selectable="false"/>
		</mx:Canvas>

		<mx:Canvas label="Dependency Injection"
				   width="100%"
				   height="100%">
			<mx:Text text="RobotLegs provides automated metadata based dependency injection. &#xd;&#xd;Constructor, Method and Setter injection are supported."
					 x="10"
					 y="10"
					 width="90%"
					 selectable="false"/>
		</mx:Canvas>

		<mx:Canvas label="Mediators"
				   width="100%"
				   height="100%">
			<mx:Text text="RobotLegs makes it easy to work with deeply-nested, lazily-instantiated View Components.&#xd;&#xd;You map Mediator classes to View Component classes during startup, and RobotLegs creates and registers Mediator instances automatically as View Components arrive on the stage."
					 x="10"
					 y="10"
					 width="90%"
					 selectable="false"/>
		</mx:Canvas>

		<mx:Canvas label="Commands"
				   width="100%"
				   height="100%">
			<mx:Text text="RobotLegs make use of native Flash Player events for framework communication.&#xd;&#xd;Commands can be strongly bound to these events.&#xd;&#xd;No parameters are passed to a Command's execute method however. Instead, you define the concrete event that will be passed to the Command as a dependency. This relieves you from having to cast the event.&#xd;&#xd;Multiple Commands can be bound to an event type. They will be executed in the order that they were mapped."
					 x="10"
					 y="10"
					 width="90%"
					 selectable="false"/>
		</mx:Canvas>

	</mx:Accordion>

</mx:Canvas>
